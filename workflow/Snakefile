# Snakefile
# Define command-line arguments
from snakemake.io import expand


configfile: "config/config.yaml"


    # Rule 3: Perform SKAT test on the genotypeD
rule skat_test:
    input:
        merged_weights=config["weights_file"],
        # merged_weights=expand("{file_path}{weight_source}_merged_weights.csv",file_path=config["genotype_file_path"],weight_source=config["weights_type"]),
        gene_regions = "helper/gene_regions.csv"
    params:
        genotype = config["genotype_prefix"],
        weights_source = config["weights_type"],
        genotype_path=config["genotype_file_path"],
        plink_path=config["plink_path"]
    log:
        stdout="logs/wkas.stdout",
        stderr="logs/wkas.stderr"
    conda:
        "envs/skat.yaml"
    shell:
        """
        export PATH=$PATH:{params.plink_path}
        for chr in {{1..22}}; do
        Rscript scripts/skat.R {params.genotype} {input.gene_regions} {input.merged_weights} {params.genotype_path} {params.weights_source} $chr
        done
        """
# # Rule 4: Merge SKAT Chromosome Results into zone
rule merge_skat_results:
    input:
        skat_results=expand("result_folder/{prefix}_{i}_{weight_source}_result_chr_{i}.txt",i=range(1,23),weight_source=config["weights_type"],prefix=config["genotype_prefix"])
    params:
        merged_skat_results=expand("result_folder/merged_{prefix}_{weight_source}_SKAT.txt",prefix=config["genotype_prefix"],weight_source=config["weights_type"])
    conda:
        "envs/merge_skat_results.yaml"
    log:
        stdout="logs/wkas.stdout",
        stderr="logs/wkas.stderr"
    shell:
        """
        if [ -f "{params.merged_skat_results}" ]; then
                rm "{params.merged_skat_results}"
        fi
        echo -e 'Gene_name\tGene_chromosome\tRegion_start\tRegion_end\tQ_test\tpvalue' > {params.merged_skat_results} && \
        for file in {input.skat_results}; do \
            if [ \"$file\" != \"{params.merged_skat_results}\" ]; then \
                tail -n +2 \"$file\" >> {params.merged_skat_results}; \
            fi; \
        done
        """
# Rule 5: Perform Disgenet disease annotation of SKAT results
rule disgenet_annotation:
    input:
        merged_skat_results=expand("result_folder/merged_{prefix}_{weight_source}_SKAT.txt",prefix=config[
        "genotype_prefix"],weight_source=config["weights_type"])
    params:
        gene_annotation=config["disgenet_reference_file"]
    log:
        stdout="logs/wkas.stdout",stderr="logs/wkas.stderr"
    conda:
        "envs/disgenet.yaml"
    shell:
        """
         Rscript scripts/obtain_genes_in_DGN.R {input.merged_skat_results} {params.gene_annotation} 0.01
         Rscript scripts/obtain_genes_in_DGN.R {input.merged_skat_results} {params.gene_annotation} 0.05
        """
rule manhattan_plots:
    input:
        merged_skat_results = expand("result_folder/merged_{prefix}_{weight_source}_SKAT.txt",prefix=config[
    "genotype_prefix"],weight_source=config["weights_type"]),
    params:
        pval_thresh = 0.05/int(config["sample_size"])
    log:
        stdout="logs/wkas.stdout",stderr="logs/wkas.stderr"

    conda:
        "envs/manhattan.yaml"
    shell:
        """
        Rscript scripts/manhattan_plots.R {input.merged_skat_results} {params.pval_thresh}
        """


