# Snakefile
# Define command-line arguments
from snakemake.io import expand


configfile: "config/config.yaml"

# # Rule: Obtain eqtl weights from bim file
rule obtain_eqtl_weights:
    input:
        bim = expand("{genotype_file_path}{genotype_prefix}.bim",genotype_file_path=config["genotype_file_path"],
            genotype_prefix=config["genotype_prefix"]),
        # bim = config["genotype_file_path"] + config["genotype_prefix"] + ".bim",
        weights = config["weights_file"]
    params:
        weights_source = config["weights_type"]
    shell:
        """
        mkdir -p output_weights
        bim="{input.bim}"
        weights="{input.weights}"
        weights_source={params.weights_source}
        for chr in {{1..22}}; do
            echo "Processing chromosome $chr"
            weights_file="output_weights/{params.weights_source}_weight_file_$chr.csv"
            python scripts/obtain_weights_from_bim.py $bim $chr $weights_file $weights
        done
        """
# #Rule 2: Merge weight files into one
# #
# #
rule merge_eqtl_weights:
    input:
        eqtl_weights=expand("output_weights/{weight_source}_weight_file_{i}.csv",i=range(1,23),weight_source=config["weights_type"]),
        # merged_eqtl_weights=expand("{file_path}{weight_source}_merged_weights.csv",file_path=config["genotype_file_path"],weight_source=config["weights_type"])
    params:
        merged_eqtl_weights = expand("{file_path}{weight_source}_merged_weights.csv",file_path=config["genotype_file_path"],weight_source=config["weights_type"])

    shell:
        """
        # Check if the merged file already exists
        if [ ! -f {params.merged_eqtl_weights} ]; then
            echo 'SNP_ID,Chromosome,Position,Score' > {params.merged_eqtl_weights}
        fi
        # Concatenate contents of all input files to the merged file, skipping header from subsequent files
        for file in {input.eqtl_weights}; do
            tail -n +2 "$file" >> {params.merged_eqtl_weights}
        done
        """
#
# #
# # Rule 3: Perform SKAT test on the genotypeD
rule skat_test:
    input:
        merged_weights=config["weights_file"],
        # merged_weights=expand("{file_path}{weight_source}_merged_weights.csv",file_path=config["genotype_file_path"],weight_source=config["weights_type"]),
        gene_regions = "helper/gene_regions.csv"
    params:
        genotype = config["genotype_prefix"],
        weights_source = config["weights_type"],
        genotype_path=config["genotype_file_path"],
        plink_path=config["plink_path"]
    shell:
        """
        export PATH=$PATH:{params.plink_path}
        for chr in {{1..22}}; do
        Rscript scripts/skat.R {params.genotype} {input.gene_regions} {input.merged_weights} {params.genotype_path} {params.weights_source} $chr
        done
        """
# # Rule 4: Merge SKAT Chromosome Results into zone
rule merge_skat_results:
    input:
        skat_results=expand("result_folder/{prefix}_{i}_{weight_source}_result_chr_{i}.txt",i=range(1,23),weight_source=config["weights_type"],prefix=config["genotype_prefix"])
    params:
        merged_skat_results=expand("result_folder/merged_{prefix}_{weight_source}_SKAT.txt",prefix=config["genotype_prefix"],weight_source=config["weights_type"])
    shell:
        "echo -e 'Gene_name\tGene_chromosome\tRegion_start\tRegion_end\tQ_test\tpvalue' > {params.merged_skat_results} && \
        for file in {input.skat_results}; do \
            if [ \"$file\" != \"{params.merged_skat_results}\" ]; then \
                tail -n +2 \"$file\" >> {params.merged_skat_results}; \
            fi; \
        done"
# Rule 5: Perform Disgenet disease annotation of SKAT results
rule disgenet_annotation:
    input:
        merged_skat_results=expand("result_folder/merged_{prefix}_{weight_source}_SKAT.txt",prefix=config[
        "genotype_prefix"],weight_source=config["weights_type"])
    params:
        gene_annotation=config["disgenet_reference_file"]
    shell:
        """
         Rscript scripts/obtain_genes_in_DGN.R {input.merged_skat_results} {params.gene_annotation} 0.01
         Rscript scripts/obtain_genes_in_DGN.R {input.merged_skat_results} {params.gene_annotation} 0.05
        """
rule manhattan_plots:
    input:
        merged_skat_results = expand("result_folder/merged_{prefix}_{weight_source}_SKAT.txt",prefix=config[
    "genotype_prefix"],weight_source=config["weights_type"]),
    params:
        pval_thresh = 0.05/int(config["sample_size"])
    shell:
        """
        Rscript scripts/manhattan_plots.R {input.merged_skat_results} {params.pval_thresh}
        """


