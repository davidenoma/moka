# Snakefile
# Define command-line arguments
from snakemake.io import expand


configfile: "config/config.yaml"


    # Rule 3: Perform MOKA test on the genotype
# Rule 3: Perform MOKA test on the genotype
rule moka_test:
    input:
        merged_weights=config["weights_file"],
        gene_regions = "helper/gene_regions.csv"
    params:
        genotype = config["genotype_prefix"],
        weights_source = config["weights_type"],
        genotype_path=config["genotype_file_path"],
        plink_path=config["plink_path"],
        is_binary = config["is_binary"]  # Pass the is_binary value
    threads: 22
    log:
        stdout="logs/wkas.stdout",
        stderr="logs/wkas.stderr"
    conda:
        "envs/moka.yaml"
    shell:
        """
        export PATH=$PATH:{params.plink_path}
        seq 1 22 | parallel {threads} --verbose Rscript scripts/moka.R {params.genotype} {input.gene_regions} {input.merged_weights} {params.genotype_path} {params.weights_source}  {{}} {params.is_binary}
        """
# # Rule 4: Merge MOKA Chromosome Results into zone
rule merge_moka_results:
    input:
        moka_results=expand("result_folder/{prefix}_{i}_{weight_source}_result_chr_{i}.txt",i=range(1,23),weight_source=config["weights_type"],prefix=config["genotype_prefix"])
    params:
        merged_moka_results=expand("result_folder/merged_{prefix}_{weight_source}_SKAT.txt",prefix=config["genotype_prefix"],weight_source=config["weights_type"])
    conda:
        "envs/merge_moka_results.yaml"
    log:
        stdout="logs/wkas.stdout",
        stderr="logs/wkas.stderr"
    shell:
        """
        if [ -f "{params.merged_moka_results}" ]; then
                rm "{params.merged_moka_results}"
        fi
        echo -e 'Gene_name\tGene_chromosome\tRegion_start\tRegion_end\tQ_test\tpvalue' > {params.merged_moka_results} && \
        for file in {input.moka_results}; do \
            if [ \"$file\" != \"{params.merged_moka_results}\" ]; then \
                tail -n +2 \"$file\" >> {params.merged_moka_results}; \
            fi; \
        done
        """
# Rule 5: Perform Disgenet disease annotation of MOKA results
rule disgenet_annotation_001:
    input:
        merged_moka_results=expand("result_folder/merged_{prefix}_{weight_source}_SKAT.txt", prefix=config["genotype_prefix"], weight_source=config["weights_type"])
    params:
        gene_annotation=config["disgenet_reference_file"]
    log:
        stdout="logs/wkas_0.01.stdout", stderr="logs/wkas_0.01.stderr"
    conda:
        "envs/disgenet.yaml"
    shell:
        """
        Rscript scripts/obtain_genes_in_DGN.R {input.merged_moka_results} {params.gene_annotation} 0.01
        """

rule disgenet_annotation_005:
    input:
        merged_moka_results=expand("result_folder/merged_{prefix}_{weight_source}_SKAT.txt", prefix=config["genotype_prefix"], weight_source=config["weights_type"])
    params:
        gene_annotation=config["disgenet_reference_file"]
    log:
        stdout="logs/wkas_0.05.stdout", stderr="logs/wkas_0.05.stderr"
    conda:
        "envs/disgenet.yaml"
    shell:
        """
        Rscript scripts/obtain_genes_in_DGN.R {input.merged_moka_results} {params.gene_annotation} 0.05
        """

rule manhattan_plots:
    input:
        merged_moka_results = expand("result_folder/merged_{prefix}_{weight_source}_SKAT.txt",prefix=config[
    "genotype_prefix"],weight_source=config["weights_type"]),
    log:
        stdout="logs/wkas.stdout",stderr="logs/wkas.stderr"
    conda:
        "envs/manhattan.yaml"
    shell:
        """
        Rscript scripts/manhattan_plots.R {input.merged_moka_results} 
        """
rule kegg_pathway_analysis:
    input:
        merged_moka_results = expand("result_folder/merged_{prefix}_{weight_source}_SKAT.txt",prefix=config[
    "genotype_prefix"],weight_source=config["weights_type"]),
    params:
        pval_thresh = 0.05
    log:
        stdout="logs/wkas.stdout",stderr="logs/wkas.stderr"
    conda:
        "envs/kegg_pathway.yaml"
    shell:
        """
        Rscript scripts/pathfindR_KEGG.R {input.merged_moka_results} {params.pval_thresh}
        """
rule go_analysis:
    input:
        merged_moka_results = expand("result_folder/merged_{prefix}_{weight_source}_SKAT.txt",prefix=config[
    "genotype_prefix"],weight_source=config["weights_type"]),
    params:
        pval_thresh = 0.05
    log:
        stdout="logs/wkas.stdout",stderr="logs/wkas.stderr"
    conda:
        "envs/go_analysis.yaml"
    shell:
        """
        Rscript scripts/GO_analysis.R {input.merged_moka_results} {params.pval_thresh}
        """

rule unweighted_skat:
    input:
        gene_regions="helper/gene_regions.csv"
    params:
        genotype_prefix=config["genotype_prefix"],
        genotype_path=config["genotype_file_path"],
        output_dir="result_folder/unweighted/",
        plink_path=config["plink_path"],
    threads: 22
    log:
        stdout="logs/unweighted_skat.stdout",
        stderr="logs/unweighted_skat.stderr"
    conda:
        "envs/moka.yaml"
    shell:
        """
        export PATH=$PATH:{params.plink_path}
        mkdir -p {params.output_dir}
        seq 1 22 | parallel  {threads} --verbose Rscript scripts/skat_unweighted.R {params.genotype_prefix} {input.gene_regions} {params.genotype_path} {{}} {params.output_dir} 
        """

# Rule: merge_unweighted_results
rule merge_unweighted_results:
    input:
        unweighted_skat_results=expand("result_folder/unweighted/{prefix}_{i}_result_chr_{i}.txt", i=range(1, 23), prefix=config["genotype_prefix"])
    params:
        merged_unweighted_results=expand("result_folder/merged_{prefix}_unweighted_SKAT.txt", prefix=config["genotype_prefix"])
    log:
        stdout="logs/merge_unweighted.stdout",
        stderr="logs/merge_unweighted.stderr"
    conda:
        "envs/moka.yaml"
    shell:
        """
        if [ -f "{params.merged_unweighted_results}" ]; then
            rm "{params.merged_unweighted_results}"
        fi
        echo -e 'Gene_name\tGene_chromosome\tRegion_start\tRegion_end\tQ_test\tpvalue' > {params.merged_unweighted_results} && \
        for file in {input.unweighted_skat_results}; do \
            tail -n +2 "$file" >> {params.merged_unweighted_results}; \
        done
        """

# Rule: unweighted_disgenet_annotation_005
rule unweighted_disgenet_annotation_005:
    input:
        merged_unweighted_results=expand("result_folder/merged_{prefix}_unweighted_SKAT.txt", prefix=config["genotype_prefix"])
    params:
        gene_annotation=config["disgenet_reference_file"]
    log:
        stdout="logs/unweighted_disgenet_0.05.stdout",
        stderr="logs/unweighted_disgenet_0.05.stderr"
    conda:
        "envs/disgenet.yaml"
    shell:
        """
        Rscript scripts/obtain_genes_in_DGN.R {input.merged_unweighted_results} {params.gene_annotation} 0.05
        """


