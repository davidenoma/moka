# Snakefile
# Define command-line arguments
from snakemake.io import expand

configfile: "config/config.yaml"

# Rule 1: Obtain eqtl weights from bim file
rule obtain_eqtl_weights:
    input:
        bim=config["genotype_prefix"] + ".bim",
        weights_source=config["weights_type"],
        weights=config["weights_file"] + ".csv"
    output:
        weights_file=expand("output_weights/weight_file{chromosome}.csv", chromosome=range(1, 23))
    shell:
        "python stability_of_kernel_based_methods/obtain_weights_from_bim.py {input.bim} {wildcards.chromosome} {output.weights_file} {input.weights}"

# Rule 2: Merge weight files into one
rule merge_eqtl_weights:
    input:
        eqtl_weights=expand("output_weights/weight_file{chromosome}.csv", chromosome=range(1, 23))
    output:
        merged_eqtl_weights=config["genotype_file_path"] + "_merged_weights.csv"
    shell:
        "echo 'SNP_ID,Chromosome,Position,Score' > {output.merged_eqtl_weights} && cat {input} >> {output.merged_eqtl_weights}"


# Rule 3: Perform SKAT test on the genotype
# rule skat_test:
#     input:
#         bfile="merged_Ilmn_ASD",
#         weights=merged_eqtl_weights_file,
#         gene_regions=gene_regions_file
#     output:
#         skat_result="skat_{chromosome}.prefix"
#     shell:
#         "Rscript stability_of_kernel_based_methods/skat.R {input.bfile} {input.gene_regions} {input.weights} ./ EQTL {wildcards.chromosome}"
#
# # Rule 4: Merge SKAT Chromosome Results into one
# rule merge_skat_results:
#     input:
#         skat_prefix=skat_prefix_files
#     output:
#         merged_skat_results=merged_skat_results_file
#     shell:
#         "echo -e 'Gene_name\tGene_chromosome\tRegion_start\tRegion_end\tQ_test\tpvalue' > {output.merged_skat_results} && \
#         for file in {input.skat_prefix}; do \
#             if [ \"$file\" != \"{output.merged_skat_results}\" ]; then \
#                 tail -n +2 \"$file\" >> {output.merged_skat_results}; \
#             fi; \
#         done"
#
# # Rule 5: Perform Disgenet disease annotation of SKAT results
# rule disgenet_annotation:
#     input:
#         skat_results=merged_skat_results_file
#     output:
#         gene_annotation=gene_annotation_file
#     shell:
#         "Rscript obtain_genes_in_DGN.R {input.skat_results} > {output.gene_annotation}"
#
# # Rule 6: Analyse Signal noise ratio based on cutoff of the input weights
# rule analyze_signal_noise_ratio:
#     input:
#         gene_annotation=gene_annotation_file,
#         skat_results=merged_skat_results_file
#     output:
#         signal_noise_ratios=signal_noise_ratios_file
#     shell:
#         "python stability_of_kernel_based_methods/signal_noise_ratio_analysis.py {input.gene_annotation} {input.skat_results} > {output.signal_noise_ratios}"
