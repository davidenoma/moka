<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="[![Snakemake](https://img.shields.io/badge/snakemake-8.15.2-brightgreen.svg)](https://snakemake.github.io)&#10;&#10;&lt;div align=&quot;center&quot;&gt;&#10;  &lt;img src=&quot;https://github.com/user-attachments/assets/6d7d5099-aac4-44e2-a3d2-eacf6921a395&quot; alt=&quot;image&quot; width=&quot;500&quot;&gt;&#10;&lt;/div&gt;&#10;&#10;#  Multi-omics bridged Kernel Association test (MOKA) Pipeline&#10;MOKA implements a Snakemake pipeline to automate data bridge kernel-based association tests. &#10;This pipeline offers flexibility of GWAS analysis &amp; visualizations with different multi-omics variant specific weights.&#10;&lt;div align=&quot;center&quot;&gt; &#10;&lt;img width=&quot;700&quot; height=&quot;700&quot; alt=&quot;moka-figure&quot; src=&quot;https://github.com/user-attachments/assets/253b74bd-435e-4405-97b2-cf63ad73a3ef&quot; /&gt;&#10;&#10;&lt;/div&gt;&#10;Publication available at: https://www.medrxiv.org/content/10.1101/2025.07.06.25330974v1 &#10;&#10;##  Usage&#10;To run the moka pipeline:&#10;&#10;1.Minimal data inputs&#10;&#10;-GWAS genotype files in PLINK format (bed, bim &amp; fam)&#10;&#10;-Variant specific weights for each SNP ('SNP_ID, CHROMOSOME, POSITION, WEIGHT)&#10;&#10;2. Install **Snakemake**&#10;   &#10;   - [Snakemake Installation Guide](https://snakemake.readthedocs.io/en/stable/getting_started/installation.html)&#10;     ```bash&#10;      conda create -c conda-forge -c bioconda -c nodefaults -n snakemake snakemake&#10;      conda activate snakemake&#10;      snakemake --help&#10;     ```&#10;3. Download and install moka&#10;&#10;```bash&#10;git clone https://github.com/davidenoma/moka&#10;cd moka&#10;```&#10;&#10;4. Configure the pipeline parameters in the `config.yaml` file.&#10;&#10;##  Rules&#10;&#10;### Rule: moka association_test&#10;- **Input:** Preprocessed genotype data and weight files.&#10;- **Output:** Results of association tests.&#10;```bash&#10;snakemake --cores &lt;num_cores&gt;&#10;```&#10;    &lt;num_cores&gt; are the number of cores to use&#10;You can automatically install the software dependencies environment using: &#10;&#10;   ```bash&#10;   snakemake --cores &lt;num_cores&gt; --use-conda&#10;   ```&#10;&#10;### Rule: merge_results&#10;- **Input:** Individual association test results.&#10;- **Output:** Merged association test results.&#10;- &#10;```bash&#10;snakemake --cores 1 merge_moka_results&#10;```&#10;&#10;### Rule: visualize_results&#10;- **Input:** Merged association test results.&#10;- **Output:** Manhattan plots with visual representations of association test results.&#10;&#10;```bash&#10;snakemake --cores 1 manhattan_plots&#10;```&#10;&#10;### Rule: go_analysis&#10;- **Input:** Merged association test results.&#10;- **Output:** GO analysis results.&#10;&#10;```bash&#10;snakemake --cores 1 go_analysis&#10;```&#10;&#10;### Rule: kegg_pathway_analysis&#10;- **Input:** Merged association test results.&#10;- **Output:** KEGG pathway analysis results.&#10;&#10;```bash&#10;snakemake --cores 1 kegg_pathway_analysis&#10;```&#10;&#10;### Rule: annotate_results&#10;- **Input:** Merged association test results.&#10;- **Output:** Annotated association test results with DisGeNet database&#10;&#10;```bash&#10;snakemake --cores 1 disgenet_annotation_005&#10;```&#10;&#10;&#10;### Rule:  Skat test with linear kernel&#10;- **Input:** Genotype&#10;- **Output:** results for association mapping, folder: output_association/&#10;```bash&#10;snakemake --cores 22 skat&#10;&#10;```&#10;## Dependencies&#10;&#10;### Software&#10;**They must be configured on your path**&#10;- **Snakemake (8.0.1+)**&#10;- **R(4.2.0+)**&#10;- **Python (3.9+)**&#10;- **PLINK (1.9+)**: [https://www.cog-genomics.org/plink/1.9/]&#10;- **Rscript**&#10;&#10;### Python Packages&#10;- **FaST-LMM**  Factored Spectrally Transformed Linear Mixed Models, is a program for performing genome-wide association studies (GWAS) on datasets of all sizes &#10;- **PySnpTools**  PySnpTools is a library for reading and manipulating genetic data.&#10;  &#10;```Python&#10;pip install pysnptools fastlmm&#10;```&#10;### R Packages&#10;&#10;- **manhattan:** R package for creating manhattan plots, commonly used in genome-wide association studies (GWAS).&#10;- **SKAT:** R package for SKAT (Sequence Kernel Association Test) which is a powerful gene-based association test.&#10;- **QQMAN:** R package for creating QQ (Quantile-Quantile) plots, commonly used in GWAS to assess whether observed p-values deviate from the expected distribution under the null hypothesis.&#10;- **GGPLOT:** R package for creating highly customizable plots and graphics.&#10;- **gprofiler2:** R package for gene set enrichment analysis (GO analysis).&#10;- **pathfindR:** R package for pathway analysis, including KEGG pathway analysis.&#10;&#10;Installation steps:&#10;&#10;```R&#10;install.packages(c(&quot;BiocManager&quot;,&quot;SKAT&quot;,&quot;ggplot2&quot;))&#10;BiocManager::install(c( &quot;gprofiler2&quot;, &quot;pathfindR&quot;,&quot;manhattan&quot;,&quot;qqman&quot;))&#10;```&#10;&#10;### Other Software&#10;- **Parallel:** Linux Parallel GNU : https://www.gnu.org/software/parallel/&#10;```bash&#10;apt install parallel #linux or WSL windows&#10;brew install parallel #macos&#10;```&#10;### Input file format&#10;- **Data Files:** Plink https://www.cog-genomics.org/plink/1.9/  format genotyped BIM, BED &amp; FAM files [!required]&#10;- Multi-omics **Bridge weights.csv** file (SNP_ID,Chromosome,Position,Weight) [!required for moka]&#10;- Gene regions file provied in GRCh38 or hg38. (Genome Research Consortium Human Build 38)&#10;- DisGeNET gene disease database reference file ( If disease external validation needed)&#10;&#10;### Liftover protocol &#10;You much lift over to GRCh38 format check here: Liftover GWAS: [https://github.com/davidenoma/LiftOver] &#10;&#10;##  Configuration&#10;- **genotype_prefix:** Prefix for genotype data files.&#10;- **weights_type:** Text string for type of bridge weights to be used e.g. &quot;eqtl&quot;, &quot;imaging&quot;&#10;- **genotype_file_path:** Path to genotype data files.&#10;- **weight_file:** Path to weight files used for association tests.&#10;- **disgenet_reference_file:** External disease database specific gene-disease associations from https://disgenet.org [For gene disease associations only!]&#10;- **spectral decomposition:** Flag for performation decomposition and transformation of genotype and phenotype, default: TRUE&#10;- **is_binary:** Flag for binary/ quantitative trait, default: TRUE &#10;- **Plink:** Path to plink installation e.g. &quot;~/software/plink&quot;&#10;  &#10;##  Additional Information&#10;For more information on the MOKA pipeline and its usage, refer to the documentation provided in the repository or contact the project maintainers.&#10;david.enoma@ucalgary.ca &#10;&#10;## Publication reference &#10;MOKA: A pipeline for multi-omics bridged SNP-set kernel association test&#10;https://www.medrxiv.org/content/10.1101/2025.07.06.25330974v1 &#10;" />
              <option name="updatedContent" value="[![Snakemake](https://img.shields.io/badge/snakemake-8.15.2-brightgreen.svg)](https://snakemake.github.io)&#10;&#10;&lt;div align=&quot;center&quot;&gt;&#10;  &lt;img src=&quot;https://github.com/user-attachments/assets/6d7d5099-aac4-44e2-a3d2-eacf6921a395&quot; alt=&quot;image&quot; width=&quot;500&quot;&gt;&#10;&lt;/div&gt;&#10;&#10;#  Multi-omics bridged Kernel Association test (MOKA) Pipeline&#10;MOKA implements a Snakemake pipeline to automate data bridge kernel-based association tests. &#10;This pipeline offers flexibility of GWAS analysis &amp; visualizations with different multi-omics variant specific weights.&#10;&lt;div align=&quot;center&quot;&gt; &#10;&lt;img width=&quot;700&quot; height=&quot;700&quot; alt=&quot;moka-figure&quot; src=&quot;https://github.com/user-attachments/assets/253b74bd-435e-4405-97b2-cf63ad73a3ef&quot; /&gt;&#10;&#10;&lt;/div&gt;&#10;Publication available at: https://www.medrxiv.org/content/10.1101/2025.07.06.25330974v1 &#10;&#10;##  Usage&#10;To run the moka pipeline:&#10;&#10;1.Minimal data inputs&#10;&#10;-GWAS genotype files in PLINK format (bed, bim &amp; fam)&#10;&#10;-Variant specific weights for each SNP ('SNP_ID, CHROMOSOME, POSITION, WEIGHT)&#10;&#10;2. Install **Snakemake**&#10;   &#10;   - [Snakemake Installation Guide](https://snakemake.readthedocs.io/en/stable/getting_started/installation.html)&#10;     ```bash&#10;      conda create -c conda-forge -c bioconda -c nodefaults -n snakemake snakemake&#10;      conda activate snakemake&#10;      snakemake --help&#10;     ```&#10;3. Download and install moka&#10;&#10;```bash&#10;git clone https://github.com/davidenoma/moka&#10;cd moka&#10;```&#10;&#10;4. Configure the pipeline parameters in the `config.yaml` file.&#10;&#10;##  Rules&#10;&#10;### Rule: generate_gene_regions&#10;- **Documentation:** Generates gene region files with specified flanking size from GFF3 annotation for gene-based association testing.&#10;&#10;### Rule: moka association_test&#10;- **Input:** Preprocessed genotype data and weight files.&#10;- **Output:** Results of association tests.&#10;```bash&#10;snakemake --cores &lt;num_cores&gt; --use-conda&#10;```&#10;    &lt;num_cores&gt; are the number of cores to use&#10;You can automatically install the software dependencies environment using: &#10;&#10;   ```bash&#10;   snakemake --cores &lt;num_cores&gt; --use-conda&#10;   ```&#10;&#10;### Rule: merge_results&#10;- **Input:** Individual association test results.&#10;- **Output:** Merged association test results.&#10;```bash&#10;snakemake --cores 1 merge_moka_results --use-conda&#10;```&#10;&#10;### Rule: visualize_results&#10;- **Input:** Merged association test results.&#10;- **Output:** Manhattan plots with visual representations of association test results.&#10;&#10;```bash&#10;snakemake --cores 1 manhattan_plots --use-conda&#10;```&#10;&#10;### Rule: go_analysis&#10;- **Input:** Merged association test results.&#10;- **Output:** GO analysis results.&#10;&#10;```bash&#10;snakemake --cores 1 go_analysis --use-conda&#10;```&#10;&#10;### Rule: kegg_pathway_analysis&#10;- **Input:** Merged association test results.&#10;- **Output:** KEGG pathway analysis results.&#10;&#10;```bash&#10;snakemake --cores 1 kegg_pathway_analysis --use-conda&#10;```&#10;&#10;### Rule: annotate_results&#10;- **Input:** Merged association test results.&#10;- **Output:** Annotated association test results with DisGeNet database&#10;&#10;```bash&#10;snakemake --cores 1 disgenet_annotation_005 --use-conda&#10;```&#10;&#10;&#10;### Rule:  Skat test with linear kernel&#10;- **Input:** Genotype&#10;- **Output:** results for association mapping, folder: output_association/&#10;```bash&#10;snakemake --cores 22 skat --use-conda&#10;```&#10;## Dependencies&#10;&#10;### Software&#10;**They must be configured on your path**&#10;- **Snakemake (8.0.1+)**&#10;- **R(4.2.0+)**&#10;- **Python (3.9+)**&#10;- **PLINK (1.9+)**: [https://www.cog-genomics.org/plink/1.9/]&#10;- **Rscript**&#10;&#10;### Python Packages&#10;- **FaST-LMM**  Factored Spectrally Transformed Linear Mixed Models, is a program for performing genome-wide association studies (GWAS) on datasets of all sizes &#10;- **PySnpTools**  PySnpTools is a library for reading and manipulating genetic data.&#10;  &#10;```Python&#10;pip install pysnptools fastlmm&#10;```&#10;### R Packages&#10;&#10;- **manhattan:** R package for creating manhattan plots, commonly used in genome-wide association studies (GWAS).&#10;- **SKAT:** R package for SKAT (Sequence Kernel Association Test) which is a powerful gene-based association test.&#10;- **QQMAN:** R package for creating QQ (Quantile-Quantile) plots, commonly used in GWAS to assess whether observed p-values deviate from the expected distribution under the null hypothesis.&#10;- **GGPLOT:** R package for creating highly customizable plots and graphics.&#10;- **gprofiler2:** R package for gene set enrichment analysis (GO analysis).&#10;- **pathfindR:** R package for pathway analysis, including KEGG pathway analysis.&#10;&#10;Installation steps:&#10;&#10;```R&#10;install.packages(c(&quot;BiocManager&quot;,&quot;SKAT&quot;,&quot;ggplot2&quot;))&#10;BiocManager::install(c( &quot;gprofiler2&quot;, &quot;pathfindR&quot;,&quot;manhattan&quot;,&quot;qqman&quot;))&#10;```&#10;&#10;### Other Software&#10;- **Parallel:** Linux Parallel GNU : https://www.gnu.org/software/parallel/&#10;```bash&#10;apt install parallel #linux or WSL windows&#10;brew install parallel #macos&#10;```&#10;### Input file format&#10;- **Data Files:** Plink https://www.cog-genomics.org/plink/1.9/  format genotyped BIM, BED &amp; FAM files [!required]&#10;- Multi-omics **Bridge weights.csv** file (SNP_ID,Chromosome,Position,Weight) [!required for moka]&#10;- Gene regions file provied in GRCh38 or hg38. (Genome Research Consortium Human Build 38)&#10;- DisGeNET gene disease database reference file ( If disease external validation needed)&#10;&#10;### Liftover protocol &#10;You much lift over to GRCh38 format check here: Liftover GWAS: [https://github.com/davidenoma/LiftOver] &#10;&#10;##  Configuration&#10;- **genotype_prefix:** Prefix for genotype data files.&#10;- **weights_type:** Text string for type of bridge weights to be used e.g. &quot;eqtl&quot;, &quot;imaging&quot;&#10;- **genotype_file_path:** Path to genotype data files.&#10;- **weight_file:** Path to weight files used for association tests.&#10;- **disgenet_reference_file:** External disease database specific gene-disease associations from https://disgenet.org [For gene disease associations only!]&#10;- **spectral decomposition:** Flag for performation decomposition and transformation of genotype and phenotype, default: TRUE&#10;- **is_binary:** Flag for binary/ quantitative trait, default: TRUE &#10;- **Plink:** Path to plink installation e.g. &quot;~/software/plink&quot;&#10;  &#10;##  Additional Information&#10;For more information on the MOKA pipeline and its usage, refer to the documentation provided in the repository or contact the project maintainers.&#10;david.enoma@ucalgary.ca &#10;&#10;## Publication reference &#10;MOKA: A pipeline for multi-omics bridged SNP-set kernel association test&#10;https://www.medrxiv.org/content/10.1101/2025.07.06.25330974v1&#10;&#10;##  Docker&#10;&#10;You can run the MOKA pipeline using the official Docker image:&#10;&#10;```bash&#10;docker pull davidenoma/moka-gwas&#10;```&#10;&#10;For usage instructions and examples, see [https://hub.docker.com/r/davidenoma/moka-gwas](https://hub.docker.com/r/davidenoma/moka-gwas)." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/update_fam_ids.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/update_fam_ids.py" />
              <option name="updatedContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;Script to update the first two columns of a FAM file with sequential IDs from 1 to 2400&#10;&quot;&quot;&quot;&#10;&#10;def update_fam_file(input_file, output_file):&#10;    &quot;&quot;&quot;Update first two columns with sequential numbers 1-2400&quot;&quot;&quot;&#10;    with open(input_file, 'r') as infile, open(output_file, 'w') as outfile:&#10;        for i, line in enumerate(infile, 1):&#10;            # Split the line into columns&#10;            columns = line.strip().split()&#10;            &#10;            # Update first two columns with sequential number&#10;            columns[0] = str(i)&#10;            columns[1] = str(i)&#10;            &#10;            # Write the updated line&#10;            outfile.write(' '.join(columns) + '\n')&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    input_file = &quot;/Users/davidenoma/PycharmProjects/wkas_pipeline/genotype_data/test_geno.fam&quot;&#10;    output_file = &quot;/Users/davidenoma/PycharmProjects/wkas_pipeline/genotype_data/test_geno_updated.fam&quot;&#10;    &#10;    update_fam_file(input_file, output_file)&#10;    print(f&quot;Updated FAM file saved as: {output_file}&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>